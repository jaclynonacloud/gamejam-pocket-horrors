[gd_resource type="VisualShader" load_steps=23 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "time"

[sub_resource type="VisualShaderNodeIf" id=2]

[sub_resource type="VisualShaderNodeScalarFunc" id=3]
function = 0

[sub_resource type="VisualShaderNodeScalarConstant" id=4]
constant = 0.1

[sub_resource type="VisualShaderNodeScalarOp" id=5]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=6]
constant = 15.0

[sub_resource type="VisualShaderNodeColorOp" id=7]
operator = 4

[sub_resource type="VisualShaderNodeColorConstant" id=8]
constant = Color( 0.851563, 0, 0, 1 )

[sub_resource type="VisualShaderNodeVectorFunc" id=9]
output_port_for_preview = 0
function = 21

[sub_resource type="VisualShaderNodeBooleanUniform" id=10]
uniform_name = "hyper_mode"

[sub_resource type="OpenSimplexNoise" id=11]
seed = 1
period = 6.3
persistence = 0.189
lacunarity = 0.48

[sub_resource type="NoiseTexture" id=12]
seamless = true
noise = SubResource( 11 )

[sub_resource type="VisualShaderNodeTexture" id=13]
texture = SubResource( 12 )

[sub_resource type="VisualShaderNodeSwitch" id=14]

[sub_resource type="VisualShaderNodeVectorOp" id=15]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=16]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarConstant" id=17]
constant = 800.0

[sub_resource type="VisualShaderNodeVectorOp" id=18]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=19]
constant = 0.1

[sub_resource type="OpenSimplexNoise" id=20]
octaves = 9
period = 9.4

[sub_resource type="NoiseTexture" id=21]
seamless = true
noise = SubResource( 20 )

[sub_resource type="VisualShaderNodeTexture" id=22]
texture = SubResource( 21 )

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform bool hyper_mode;
uniform sampler2D tex_frg_9;
uniform sampler2D tex_frg_2;



void vertex() {
// Output:0

}

void fragment() {
// BooleanUniform:19
	bool n_out19p0 = hyper_mode;

// Input:10
	float n_out10p0 = TIME;

// Scalar:15
	float n_out15p0 = 15.000000;

// ScalarOp:14
	float n_out14p0 = n_out10p0 * n_out15p0;

// ScalarFunc:12
	float n_out12p0 = sin(n_out14p0);

// Scalar:13
	float n_out13p0 = 0.100000;

// Input:4
	vec3 n_out4p0 = vec3(UV, 0.0);

// Scalar:5
	float n_out5p0 = 800.000000;

// VectorOp:3
	vec3 n_out3p0 = n_out4p0 * vec3(n_out5p0);

// Texture:9
	vec4 tex_frg_9_read = texture(tex_frg_9, n_out3p0.xy);
	vec3 n_out9p0 = tex_frg_9_read.rgb;
	float n_out9p1 = tex_frg_9_read.a;

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out3p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// If:11
	float n_in11p2 = 0.00001;
	vec3 n_in11p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out11p0;
	if(abs(n_out12p0 - n_out13p0) < n_in11p2)
	{
		n_out11p0 = n_in11p3;
	}
	else if(n_out12p0 < n_out13p0)
	{
		n_out11p0 = n_out2p0;
	}
	else
	{
		n_out11p0 = n_out9p0;
	}

// Scalar:8
	float n_out8p0 = 0.100000;

// VectorOp:7
	vec3 n_out7p0 = n_out11p0 * vec3(n_out8p0);

// Color:17
	vec3 n_out17p0 = vec3(0.851563, 0.000000, 0.000000);
	float n_out17p1 = 1.000000;

// ColorOp:16
	vec3 n_out16p0;
	{
		float base = n_out7p0.x;
		float blend = n_out17p0.x;
		if (base < 0.5) {
			n_out16p0.x = 2.0 * base * blend;
		} else {
			n_out16p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out7p0.y;
		float blend = n_out17p0.y;
		if (base < 0.5) {
			n_out16p0.y = 2.0 * base * blend;
		} else {
			n_out16p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out7p0.z;
		float blend = n_out17p0.z;
		if (base < 0.5) {
			n_out16p0.z = 2.0 * base * blend;
		} else {
			n_out16p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}

// VectorFunc:18
	vec3 n_out18p0 = inversesqrt(n_out16p0);

// VectorSwitch:20
	vec3 n_out20p0;
	if(n_out19p0)
	{
		n_out20p0 = n_out18p0;
	}
	else
	{
		n_out20p0 = n_out16p0;
	}

// Output:0
	ALBEDO = n_out20p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1829, 114 )
nodes/fragment/0/position = Vector2( 1460, 20 )
nodes/fragment/2/node = SubResource( 13 )
nodes/fragment/2/position = Vector2( -400, 100 )
nodes/fragment/3/node = SubResource( 15 )
nodes/fragment/3/position = Vector2( -880, 180 )
nodes/fragment/4/node = SubResource( 16 )
nodes/fragment/4/position = Vector2( -1240, 180 )
nodes/fragment/5/node = SubResource( 17 )
nodes/fragment/5/position = Vector2( -1280, 260 )
nodes/fragment/7/node = SubResource( 18 )
nodes/fragment/7/position = Vector2( -20, 160 )
nodes/fragment/8/node = SubResource( 19 )
nodes/fragment/8/position = Vector2( -180, 320 )
nodes/fragment/9/node = SubResource( 22 )
nodes/fragment/9/position = Vector2( -400, -200 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -880, -380 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -140, -360 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( -360, -420 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( -360, -360 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( -587, -427 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( -880, -300 )
nodes/fragment/16/node = SubResource( 7 )
nodes/fragment/16/position = Vector2( 420, -20 )
nodes/fragment/17/node = SubResource( 8 )
nodes/fragment/17/position = Vector2( 240, 200 )
nodes/fragment/18/node = SubResource( 9 )
nodes/fragment/18/position = Vector2( 740, -60 )
nodes/fragment/19/node = SubResource( 10 )
nodes/fragment/19/position = Vector2( 420, -220 )
nodes/fragment/20/node = SubResource( 14 )
nodes/fragment/20/position = Vector2( 767, -238 )
nodes/fragment/connections = PoolIntArray( 3, 0, 2, 0, 4, 0, 3, 0, 5, 0, 3, 1, 8, 0, 7, 1, 3, 0, 9, 0, 12, 0, 11, 0, 13, 0, 11, 1, 9, 0, 11, 4, 2, 0, 11, 5, 11, 0, 7, 0, 10, 0, 14, 0, 15, 0, 14, 1, 14, 0, 12, 0, 7, 0, 16, 0, 17, 0, 16, 1, 16, 0, 18, 0, 19, 0, 20, 0, 18, 0, 20, 1, 16, 0, 20, 2, 20, 0, 0, 0 )
